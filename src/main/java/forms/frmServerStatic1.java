/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import blockchain.Block;
import blockchain.BlockChain;
import blockchain.Cifrado;
import blockchain.NodeData;
import blockchain.Transaction;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author carlos
 */
public class frmServerStatic1 extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form frmServer
     */
    private Thread tListener;  
    private ArrayList<NodeData> aOtherServers;
    private ArrayList<Cliente> aClients;
    private ArrayList<frmWallet> frmWallets;
    private ServerSocket SvrSocket;
    private BlockChain bc;
    private Cifrado oCifrado;
    
     String nodoNombre;
     String miIP;
     int miPuerto;
    
       
    public frmServerStatic1() {
        initComponents();
        this.oCifrado= new Cifrado("777779999mashayeloso");
        this.startServer();
        
         nodoNombre= "El Salvador";
         miIP="10.97.120.110";
         miPuerto= 6010;
                      
        this.jLabel6.setText(nodoNombre);
        this.jLabel7.setText("Network IP Adrress: "+miIP);
        this.jLabel5.setText("Port number: "+ Integer.toString(miPuerto));
        this.aOtherServers=new ArrayList<>();
        this.aClients=new ArrayList<>();
        this.frmWallets=new ArrayList<>();
        
        this.startClientAccount();
        
    }

//    public void registerNet(ArrayList<NodeData> pNodes)
//    {
//        String sCad="";
//        for(int i=0; i<pNodes.size(); i++)
//        { 
//            if(!pNodes.get(i).getNodeName().equals(this.currentNode.getNodeName()))
//            {
//                this.aOtherServers.add(pNodes.get(i));
//                sCad+= pNodes.get(i).getNodeName()+", ";
//            }
//        }
//        if (sCad.length()<1) sCad="none";
//        this.jLabel4.setText(sCad);   
//    }
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nodo de Servidor");

        jPanel1.setBackground(new java.awt.Color(38, 48, 58));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(95, 254, 243));
        jLabel1.setText("Server Node Sta Location: ");

        jLabel5.setForeground(new java.awt.Color(254, 254, 254));
        jLabel5.setText("Port...");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(95, 254, 243));
        jLabel6.setText("...");

        jLabel7.setForeground(new java.awt.Color(254, 254, 254));
        jLabel7.setText("IP...");

        jLabel3.setForeground(new java.awt.Color(255, 255, 5));
        jLabel3.setText("Available nodes:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 5));
        jLabel4.setText("none");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(71, 118, 165));

        jLabel10.setForeground(new java.awt.Color(254, 254, 254));
        jLabel10.setText("BlockChain Actions and Messages:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addContainerGap())
        );

        jButton1.setText("Balances");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Summary");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(245, 235, 236));
        jScrollPane1.setForeground(new java.awt.Color(71, 0, 0));

        txtMessages.setBackground(new java.awt.Color(243, 233, 233));
        txtMessages.setColumns(20);
        txtMessages.setForeground(new java.awt.Color(86, 13, 13));
        txtMessages.setRows(5);
        jScrollPane1.setViewportView(txtMessages);

        jTextField1.setText("mensajes");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTextField1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /*String sCad="";
        for(int i=1; i<this.bc.size(); i++)
        {
            sCad+= "Block "+this.bc.getBlock(i).getId()+". "+
                    /*this.bc.transactionReport(this.bc.getBlock(i).getId())*/
                    /**+"-------------------\n";
        }
        this.txtMessages.setText(sCad);
        **/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       // this.listBalances();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmServerStatic1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmServerStatic1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmServerStatic1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmServerStatic1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmServerStatic1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea txtMessages;
    // End of variables declaration//GEN-END:variables

    private void startServer()
    {
        //create blockchain
        this.bc= new BlockChain(3,"0");
        this.bc.createGenesis();
        
        //start listener
        try
        {
            InetAddress iAddress = InetAddress.getByName(miIP); 
            InetSocketAddress sNetServer=new InetSocketAddress(iAddress, miPuerto);
            SvrSocket = new ServerSocket();
            SvrSocket.bind(sNetServer);
            tListener= new Thread(this);
            tListener.start();
        }
        catch(Exception ee) {}
    }
    
    public void setBlockChainCopy(BlockChain copyBlockChain)
    {
        // improve this method with a real copy
       this.bc=copyBlockChain;
    }
    
    public BlockChain getBlockChainCopy()
    {
        // improve this method with a real copy
       return this.bc;
    }
            
    public int getBlockChainSize()
    {
        return this.bc.size();
    }
    
    public void startClientAccount( )
    {
        this.bc.createBlock();
        /*this.bc.getLastBlock().setTransaction("0000WALLET000INITIAL000BALANCE", 
                800, "Jose");
        this.bc.mineBlock();*/
    }
    
    public void registerClients(String nombreCliente)
    {
        this.aClients.add(new Cliente(nombreCliente));
       // this.listBalances();
    }
    
    
    public boolean broadcastBlock(Block pBlk)
    {
        try
        {
            for(int i=0; i<this.aOtherServers.size(); i++)
            {
                Socket socket = 
                        new Socket(this.aOtherServers.get(i).getIPAddress(),
                                   this.aOtherServers.get(i).getSocketNum());
                ObjectOutputStream oos = 
                        new ObjectOutputStream(socket.getOutputStream());
                oos.writeObject(pBlk);
                socket.close();   
            }
            return true;
        }
        catch(Exception e) { }
        return false;
    }
    
    @Override
    public void run() {
        while(true)
        {
            try
            { 
                Socket socket = this.SvrSocket.accept();

                //Deserialization
                InputStream is = socket.getInputStream();
                ObjectInputStream ois = new ObjectInputStream(is);
                Block blk=(Block)ois.readObject();
                socket.close();
                
                if(blk.getId()<0) //this is a proposed block from a wallet
                {
                    String sSender=   this.oCifrado.desencriptar(blk.getTransaction(0).getSender());
                    String sReceiver= this.oCifrado.desencriptar(blk.getTransaction(0).getReceiver());
                    double dAmount= blk.getTransaction(0).getAmount();
                   
                   /* Transaction tTran= new Transaction(0,sSender,sReceiver,dAmount);*/
                                       
                    if(this.bc.getBalance(sSender)>=dAmount)
                    {
                        this.bc.createBlock();
                       /* this.bc.getLastBlock().setTransaction(tTran);*/
                        this.bc.mineBlock();
                        this.broadcastBlock(this.bc.getLastBlock());
                        this.reportNewBalance(sReceiver, dAmount);
                        
                    }
                    else this.txtMessages.setText("Insufficient funds from: "+sSender);
                }
                else
                {
                    //when received complete blocks
                    this.bc.addProvedBlock(blk);
                }
              //  this.listBalances();
                
            }
            catch(Exception ee)
            {
               this.jTextField1.setText(ee.toString());
            }
        }
    }
    
//    public void listBalances()
//    {
//        String sCad="";
//        for(int i=0; i<this.aClients.size(); i++)
//        {
//            sCad+= this.aClients.get(i).getNodeName()+
//                    "= $ "+
//                    Double.toString(this.bc.getBalance(this.aClients.get(i).getNodeName()))
//                    + "\n";
//        }
//        this.txtMessages.setText(sCad);
//    }
    
    public void reportNewBalance(String receiver, double amount)
    {
        for(int i=0; i<this.aClients.size(); i++)
        {
            if(this.aClients.get(i).nombre.equals(receiver))
            {
               try
               {
                   Socket socket = new Socket(
                        this.aClients.get(i).sIP,
                        this.aClients.get(i).iPuerto);
                   ObjectOutputStream oos = 
                        new ObjectOutputStream(socket.getOutputStream());
                   oos.writeObject(amount);
                   socket.close();
               }
               catch(Exception e) {  }
            }
        }
    }
    
    
}
